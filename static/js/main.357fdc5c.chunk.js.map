{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","props","onAdd","defaultTitle","defaultDescription","defaultImgUrl","defaultImdbUrl","defaultImdbId","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","handleFormSubmit","prev","trim","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovie","imbdUrl","imbdId","prevMovie","newMovie","OnAddMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.357fdc5c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (title: string,\n    description: string,\n    imgUrl: string,\n    imdbUrl: string,\n    imdbId: string,) => void;\n  defaultTitle?: string;\n  defaultDescription?: string;\n  defaultImgUrl?: string;\n  defaultImdbUrl?: string;\n  defaultImdbId?: string;\n};\n\nexport const NewMovie: React.FC<Props> = (props) => {\n  const {\n    onAdd,\n    defaultTitle = '',\n    defaultDescription = '',\n    defaultImgUrl = '',\n    defaultImdbUrl = '',\n    defaultImdbId = '',\n  } = props;\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n\n  const [title, setTitle] = useState(defaultTitle);\n  const [description, setDescription] = useState(defaultDescription);\n  const [imgUrl, setImgUrl] = useState(defaultImgUrl);\n  const [imdbUrl, setImdbUrl] = useState(defaultImdbUrl);\n  const [imdbId, setImdbId] = useState(defaultImdbId);\n\n  const resetForm = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleFormSubmit = () => {\n    setCount(prev => prev + 1);\n\n    if (\n      !title.trim() || !description.trim() || !imgUrl.trim()\n      || !imdbUrl.trim() || !imdbId.trim()\n    ) {\n      return;\n    }\n\n    onAdd(title, description, imgUrl, imdbUrl, imdbId);\n\n    resetForm();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => {\n        event.preventDefault();\n        handleFormSubmit();\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!title.trim() || !description.trim() || !imgUrl.trim()\n              || !imdbUrl.trim() || !imdbId.trim()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movie, setMovie] = useState(moviesFromServer);\n\n  const OnAddMovie = (\n    title: string,\n    description: string,\n    imgUrl: string,\n    imdbUrl: string,\n    imdbId: string,\n  ) => {\n    setMovie((prevMovie) => {\n      const newMovie: Movie = {\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      };\n\n      return [...prevMovie, newMovie];\n    });\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movie} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(title, description, imgUrl, imbdUrl, imbdId) => (\n          OnAddMovie(title, description, imgUrl, imbdUrl, imbdId))}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}